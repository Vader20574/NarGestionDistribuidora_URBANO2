'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsfinanza
    Inherits DataSet
    
    Private tabledsbanco As dsbancoDataTable
    
    Private tabledscliente As dsclienteDataTable
    
    Private tabledsdocumento As dsdocumentoDataTable
    
    Private tablectabanco As ctabancoDataTable
    
    Private tablecambio As cambioDataTable
    
    Private tablecompcaja As compcajaDataTable
    
    Private tablepagoprov As pagoprovDataTable
    
    Private tableexcel As excelDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dsbanco")) Is Nothing) Then
                Me.Tables.Add(New dsbancoDataTable(ds.Tables("dsbanco")))
            End If
            If (Not (ds.Tables("dscliente")) Is Nothing) Then
                Me.Tables.Add(New dsclienteDataTable(ds.Tables("dscliente")))
            End If
            If (Not (ds.Tables("dsdocumento")) Is Nothing) Then
                Me.Tables.Add(New dsdocumentoDataTable(ds.Tables("dsdocumento")))
            End If
            If (Not (ds.Tables("ctabanco")) Is Nothing) Then
                Me.Tables.Add(New ctabancoDataTable(ds.Tables("ctabanco")))
            End If
            If (Not (ds.Tables("cambio")) Is Nothing) Then
                Me.Tables.Add(New cambioDataTable(ds.Tables("cambio")))
            End If
            If (Not (ds.Tables("compcaja")) Is Nothing) Then
                Me.Tables.Add(New compcajaDataTable(ds.Tables("compcaja")))
            End If
            If (Not (ds.Tables("pagoprov")) Is Nothing) Then
                Me.Tables.Add(New pagoprovDataTable(ds.Tables("pagoprov")))
            End If
            If (Not (ds.Tables("excel")) Is Nothing) Then
                Me.Tables.Add(New excelDataTable(ds.Tables("excel")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dsbanco As dsbancoDataTable
        Get
            Return Me.tabledsbanco
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dscliente As dsclienteDataTable
        Get
            Return Me.tabledscliente
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dsdocumento As dsdocumentoDataTable
        Get
            Return Me.tabledsdocumento
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ctabanco As ctabancoDataTable
        Get
            Return Me.tablectabanco
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cambio As cambioDataTable
        Get
            Return Me.tablecambio
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property compcaja As compcajaDataTable
        Get
            Return Me.tablecompcaja
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pagoprov As pagoprovDataTable
        Get
            Return Me.tablepagoprov
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property excel As excelDataTable
        Get
            Return Me.tableexcel
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsfinanza = CType(MyBase.Clone,dsfinanza)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("dsbanco")) Is Nothing) Then
            Me.Tables.Add(New dsbancoDataTable(ds.Tables("dsbanco")))
        End If
        If (Not (ds.Tables("dscliente")) Is Nothing) Then
            Me.Tables.Add(New dsclienteDataTable(ds.Tables("dscliente")))
        End If
        If (Not (ds.Tables("dsdocumento")) Is Nothing) Then
            Me.Tables.Add(New dsdocumentoDataTable(ds.Tables("dsdocumento")))
        End If
        If (Not (ds.Tables("ctabanco")) Is Nothing) Then
            Me.Tables.Add(New ctabancoDataTable(ds.Tables("ctabanco")))
        End If
        If (Not (ds.Tables("cambio")) Is Nothing) Then
            Me.Tables.Add(New cambioDataTable(ds.Tables("cambio")))
        End If
        If (Not (ds.Tables("compcaja")) Is Nothing) Then
            Me.Tables.Add(New compcajaDataTable(ds.Tables("compcaja")))
        End If
        If (Not (ds.Tables("pagoprov")) Is Nothing) Then
            Me.Tables.Add(New pagoprovDataTable(ds.Tables("pagoprov")))
        End If
        If (Not (ds.Tables("excel")) Is Nothing) Then
            Me.Tables.Add(New excelDataTable(ds.Tables("excel")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabledsbanco = CType(Me.Tables("dsbanco"),dsbancoDataTable)
        If (Not (Me.tabledsbanco) Is Nothing) Then
            Me.tabledsbanco.InitVars
        End If
        Me.tabledscliente = CType(Me.Tables("dscliente"),dsclienteDataTable)
        If (Not (Me.tabledscliente) Is Nothing) Then
            Me.tabledscliente.InitVars
        End If
        Me.tabledsdocumento = CType(Me.Tables("dsdocumento"),dsdocumentoDataTable)
        If (Not (Me.tabledsdocumento) Is Nothing) Then
            Me.tabledsdocumento.InitVars
        End If
        Me.tablectabanco = CType(Me.Tables("ctabanco"),ctabancoDataTable)
        If (Not (Me.tablectabanco) Is Nothing) Then
            Me.tablectabanco.InitVars
        End If
        Me.tablecambio = CType(Me.Tables("cambio"),cambioDataTable)
        If (Not (Me.tablecambio) Is Nothing) Then
            Me.tablecambio.InitVars
        End If
        Me.tablecompcaja = CType(Me.Tables("compcaja"),compcajaDataTable)
        If (Not (Me.tablecompcaja) Is Nothing) Then
            Me.tablecompcaja.InitVars
        End If
        Me.tablepagoprov = CType(Me.Tables("pagoprov"),pagoprovDataTable)
        If (Not (Me.tablepagoprov) Is Nothing) Then
            Me.tablepagoprov.InitVars
        End If
        Me.tableexcel = CType(Me.Tables("excel"),excelDataTable)
        If (Not (Me.tableexcel) Is Nothing) Then
            Me.tableexcel.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsfinanza"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsfinanza.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabledsbanco = New dsbancoDataTable
        Me.Tables.Add(Me.tabledsbanco)
        Me.tabledscliente = New dsclienteDataTable
        Me.Tables.Add(Me.tabledscliente)
        Me.tabledsdocumento = New dsdocumentoDataTable
        Me.Tables.Add(Me.tabledsdocumento)
        Me.tablectabanco = New ctabancoDataTable
        Me.Tables.Add(Me.tablectabanco)
        Me.tablecambio = New cambioDataTable
        Me.Tables.Add(Me.tablecambio)
        Me.tablecompcaja = New compcajaDataTable
        Me.Tables.Add(Me.tablecompcaja)
        Me.tablepagoprov = New pagoprovDataTable
        Me.Tables.Add(Me.tablepagoprov)
        Me.tableexcel = New excelDataTable
        Me.Tables.Add(Me.tableexcel)
    End Sub
    
    Private Function ShouldSerializedsbanco() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializedscliente() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializedsdocumento() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializectabanco() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecambio() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecompcaja() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepagoprov() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeexcel() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub dsbancoRowChangeEventHandler(ByVal sender As Object, ByVal e As dsbancoRowChangeEvent)
    
    Public Delegate Sub dsclienteRowChangeEventHandler(ByVal sender As Object, ByVal e As dsclienteRowChangeEvent)
    
    Public Delegate Sub dsdocumentoRowChangeEventHandler(ByVal sender As Object, ByVal e As dsdocumentoRowChangeEvent)
    
    Public Delegate Sub ctabancoRowChangeEventHandler(ByVal sender As Object, ByVal e As ctabancoRowChangeEvent)
    
    Public Delegate Sub cambioRowChangeEventHandler(ByVal sender As Object, ByVal e As cambioRowChangeEvent)
    
    Public Delegate Sub compcajaRowChangeEventHandler(ByVal sender As Object, ByVal e As compcajaRowChangeEvent)
    
    Public Delegate Sub pagoprovRowChangeEventHandler(ByVal sender As Object, ByVal e As pagoprovRowChangeEvent)
    
    Public Delegate Sub excelRowChangeEventHandler(ByVal sender As Object, ByVal e As excelRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsbancoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo As DataColumn
        
        Private columnbanco As DataColumn
        
        Friend Sub New()
            MyBase.New("dsbanco")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigoColumn As DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        Friend ReadOnly Property bancoColumn As DataColumn
            Get
                Return Me.columnbanco
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As dsbancoRow
            Get
                Return CType(Me.Rows(index),dsbancoRow)
            End Get
        End Property
        
        Public Event dsbancoRowChanged As dsbancoRowChangeEventHandler
        
        Public Event dsbancoRowChanging As dsbancoRowChangeEventHandler
        
        Public Event dsbancoRowDeleted As dsbancoRowChangeEventHandler
        
        Public Event dsbancoRowDeleting As dsbancoRowChangeEventHandler
        
        Public Overloads Sub AdddsbancoRow(ByVal row As dsbancoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdddsbancoRow(ByVal codigo As String, ByVal banco As String) As dsbancoRow
            Dim rowdsbancoRow As dsbancoRow = CType(Me.NewRow,dsbancoRow)
            rowdsbancoRow.ItemArray = New Object() {codigo, banco}
            Me.Rows.Add(rowdsbancoRow)
            Return rowdsbancoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As dsbancoDataTable = CType(MyBase.Clone,dsbancoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New dsbancoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo = Me.Columns("codigo")
            Me.columnbanco = Me.Columns("banco")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo = New DataColumn("codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo)
            Me.columnbanco = New DataColumn("banco", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbanco)
        End Sub
        
        Public Function NewdsbancoRow() As dsbancoRow
            Return CType(Me.NewRow,dsbancoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New dsbancoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(dsbancoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dsbancoRowChangedEvent) Is Nothing) Then
                RaiseEvent dsbancoRowChanged(Me, New dsbancoRowChangeEvent(CType(e.Row,dsbancoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dsbancoRowChangingEvent) Is Nothing) Then
                RaiseEvent dsbancoRowChanging(Me, New dsbancoRowChangeEvent(CType(e.Row,dsbancoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dsbancoRowDeletedEvent) Is Nothing) Then
                RaiseEvent dsbancoRowDeleted(Me, New dsbancoRowChangeEvent(CType(e.Row,dsbancoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dsbancoRowDeletingEvent) Is Nothing) Then
                RaiseEvent dsbancoRowDeleting(Me, New dsbancoRowChangeEvent(CType(e.Row,dsbancoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovedsbancoRow(ByVal row As dsbancoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsbancoRow
        Inherits DataRow
        
        Private tabledsbanco As dsbancoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledsbanco = CType(Me.Table,dsbancoDataTable)
        End Sub
        
        Public Property codigo As String
            Get
                Try 
                    Return CType(Me(Me.tabledsbanco.codigoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsbanco.codigoColumn) = value
            End Set
        End Property
        
        Public Property banco As String
            Get
                Try 
                    Return CType(Me(Me.tabledsbanco.bancoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsbanco.bancoColumn) = value
            End Set
        End Property
        
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tabledsbanco.codigoColumn)
        End Function
        
        Public Sub SetcodigoNull()
            Me(Me.tabledsbanco.codigoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbancoNull() As Boolean
            Return Me.IsNull(Me.tabledsbanco.bancoColumn)
        End Function
        
        Public Sub SetbancoNull()
            Me(Me.tabledsbanco.bancoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsbancoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As dsbancoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As dsbancoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As dsbancoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsclienteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo As DataColumn
        
        Private columnapellidop As DataColumn
        
        Private columnapellidom As DataColumn
        
        Private columnnombre As DataColumn
        
        Private columnrazon As DataColumn
        
        Private columnruc As DataColumn
        
        Friend Sub New()
            MyBase.New("dscliente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigoColumn As DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        Friend ReadOnly Property apellidopColumn As DataColumn
            Get
                Return Me.columnapellidop
            End Get
        End Property
        
        Friend ReadOnly Property apellidomColumn As DataColumn
            Get
                Return Me.columnapellidom
            End Get
        End Property
        
        Friend ReadOnly Property nombreColumn As DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        Friend ReadOnly Property razonColumn As DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        Friend ReadOnly Property rucColumn As DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As dsclienteRow
            Get
                Return CType(Me.Rows(index),dsclienteRow)
            End Get
        End Property
        
        Public Event dsclienteRowChanged As dsclienteRowChangeEventHandler
        
        Public Event dsclienteRowChanging As dsclienteRowChangeEventHandler
        
        Public Event dsclienteRowDeleted As dsclienteRowChangeEventHandler
        
        Public Event dsclienteRowDeleting As dsclienteRowChangeEventHandler
        
        Public Overloads Sub AdddsclienteRow(ByVal row As dsclienteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdddsclienteRow(ByVal codigo As String, ByVal apellidop As String, ByVal apellidom As String, ByVal nombre As String, ByVal razon As String, ByVal ruc As String) As dsclienteRow
            Dim rowdsclienteRow As dsclienteRow = CType(Me.NewRow,dsclienteRow)
            rowdsclienteRow.ItemArray = New Object() {codigo, apellidop, apellidom, nombre, razon, ruc}
            Me.Rows.Add(rowdsclienteRow)
            Return rowdsclienteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As dsclienteDataTable = CType(MyBase.Clone,dsclienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New dsclienteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo = Me.Columns("codigo")
            Me.columnapellidop = Me.Columns("apellidop")
            Me.columnapellidom = Me.Columns("apellidom")
            Me.columnnombre = Me.Columns("nombre")
            Me.columnrazon = Me.Columns("razon")
            Me.columnruc = Me.Columns("ruc")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo = New DataColumn("codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo)
            Me.columnapellidop = New DataColumn("apellidop", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnapellidop)
            Me.columnapellidom = New DataColumn("apellidom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnapellidom)
            Me.columnnombre = New DataColumn("nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnombre)
            Me.columnrazon = New DataColumn("razon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrazon)
            Me.columnruc = New DataColumn("ruc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnruc)
        End Sub
        
        Public Function NewdsclienteRow() As dsclienteRow
            Return CType(Me.NewRow,dsclienteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New dsclienteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(dsclienteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dsclienteRowChangedEvent) Is Nothing) Then
                RaiseEvent dsclienteRowChanged(Me, New dsclienteRowChangeEvent(CType(e.Row,dsclienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dsclienteRowChangingEvent) Is Nothing) Then
                RaiseEvent dsclienteRowChanging(Me, New dsclienteRowChangeEvent(CType(e.Row,dsclienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dsclienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent dsclienteRowDeleted(Me, New dsclienteRowChangeEvent(CType(e.Row,dsclienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dsclienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent dsclienteRowDeleting(Me, New dsclienteRowChangeEvent(CType(e.Row,dsclienteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovedsclienteRow(ByVal row As dsclienteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsclienteRow
        Inherits DataRow
        
        Private tabledscliente As dsclienteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledscliente = CType(Me.Table,dsclienteDataTable)
        End Sub
        
        Public Property codigo As String
            Get
                Try 
                    Return CType(Me(Me.tabledscliente.codigoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledscliente.codigoColumn) = value
            End Set
        End Property
        
        Public Property apellidop As String
            Get
                Try 
                    Return CType(Me(Me.tabledscliente.apellidopColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledscliente.apellidopColumn) = value
            End Set
        End Property
        
        Public Property apellidom As String
            Get
                Try 
                    Return CType(Me(Me.tabledscliente.apellidomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledscliente.apellidomColumn) = value
            End Set
        End Property
        
        Public Property nombre As String
            Get
                Try 
                    Return CType(Me(Me.tabledscliente.nombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledscliente.nombreColumn) = value
            End Set
        End Property
        
        Public Property razon As String
            Get
                Try 
                    Return CType(Me(Me.tabledscliente.razonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledscliente.razonColumn) = value
            End Set
        End Property
        
        Public Property ruc As String
            Get
                Try 
                    Return CType(Me(Me.tabledscliente.rucColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledscliente.rucColumn) = value
            End Set
        End Property
        
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tabledscliente.codigoColumn)
        End Function
        
        Public Sub SetcodigoNull()
            Me(Me.tabledscliente.codigoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsapellidopNull() As Boolean
            Return Me.IsNull(Me.tabledscliente.apellidopColumn)
        End Function
        
        Public Sub SetapellidopNull()
            Me(Me.tabledscliente.apellidopColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsapellidomNull() As Boolean
            Return Me.IsNull(Me.tabledscliente.apellidomColumn)
        End Function
        
        Public Sub SetapellidomNull()
            Me(Me.tabledscliente.apellidomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tabledscliente.nombreColumn)
        End Function
        
        Public Sub SetnombreNull()
            Me(Me.tabledscliente.nombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tabledscliente.razonColumn)
        End Function
        
        Public Sub SetrazonNull()
            Me(Me.tabledscliente.razonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tabledscliente.rucColumn)
        End Function
        
        Public Sub SetrucNull()
            Me(Me.tabledscliente.rucColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsclienteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As dsclienteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As dsclienteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As dsclienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsdocumentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo As DataColumn
        
        Private columndescripcion As DataColumn
        
        Private columnabreviatura As DataColumn
        
        Private columnnota_de_credito As DataColumn
        
        Friend Sub New()
            MyBase.New("dsdocumento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigoColumn As DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        Friend ReadOnly Property descripcionColumn As DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        Friend ReadOnly Property abreviaturaColumn As DataColumn
            Get
                Return Me.columnabreviatura
            End Get
        End Property
        
        Friend ReadOnly Property nota_de_creditoColumn As DataColumn
            Get
                Return Me.columnnota_de_credito
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As dsdocumentoRow
            Get
                Return CType(Me.Rows(index),dsdocumentoRow)
            End Get
        End Property
        
        Public Event dsdocumentoRowChanged As dsdocumentoRowChangeEventHandler
        
        Public Event dsdocumentoRowChanging As dsdocumentoRowChangeEventHandler
        
        Public Event dsdocumentoRowDeleted As dsdocumentoRowChangeEventHandler
        
        Public Event dsdocumentoRowDeleting As dsdocumentoRowChangeEventHandler
        
        Public Overloads Sub AdddsdocumentoRow(ByVal row As dsdocumentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdddsdocumentoRow(ByVal codigo As String, ByVal descripcion As String, ByVal abreviatura As String, ByVal nota_de_credito As Boolean) As dsdocumentoRow
            Dim rowdsdocumentoRow As dsdocumentoRow = CType(Me.NewRow,dsdocumentoRow)
            rowdsdocumentoRow.ItemArray = New Object() {codigo, descripcion, abreviatura, nota_de_credito}
            Me.Rows.Add(rowdsdocumentoRow)
            Return rowdsdocumentoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As dsdocumentoDataTable = CType(MyBase.Clone,dsdocumentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New dsdocumentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo = Me.Columns("codigo")
            Me.columndescripcion = Me.Columns("descripcion")
            Me.columnabreviatura = Me.Columns("abreviatura")
            Me.columnnota_de_credito = Me.Columns("nota_de_credito")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo = New DataColumn("codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo)
            Me.columndescripcion = New DataColumn("descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescripcion)
            Me.columnabreviatura = New DataColumn("abreviatura", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabreviatura)
            Me.columnnota_de_credito = New DataColumn("nota_de_credito", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnota_de_credito)
        End Sub
        
        Public Function NewdsdocumentoRow() As dsdocumentoRow
            Return CType(Me.NewRow,dsdocumentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New dsdocumentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(dsdocumentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dsdocumentoRowChangedEvent) Is Nothing) Then
                RaiseEvent dsdocumentoRowChanged(Me, New dsdocumentoRowChangeEvent(CType(e.Row,dsdocumentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dsdocumentoRowChangingEvent) Is Nothing) Then
                RaiseEvent dsdocumentoRowChanging(Me, New dsdocumentoRowChangeEvent(CType(e.Row,dsdocumentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dsdocumentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent dsdocumentoRowDeleted(Me, New dsdocumentoRowChangeEvent(CType(e.Row,dsdocumentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dsdocumentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent dsdocumentoRowDeleting(Me, New dsdocumentoRowChangeEvent(CType(e.Row,dsdocumentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovedsdocumentoRow(ByVal row As dsdocumentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsdocumentoRow
        Inherits DataRow
        
        Private tabledsdocumento As dsdocumentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledsdocumento = CType(Me.Table,dsdocumentoDataTable)
        End Sub
        
        Public Property codigo As String
            Get
                Try 
                    Return CType(Me(Me.tabledsdocumento.codigoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsdocumento.codigoColumn) = value
            End Set
        End Property
        
        Public Property descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tabledsdocumento.descripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsdocumento.descripcionColumn) = value
            End Set
        End Property
        
        Public Property abreviatura As String
            Get
                Try 
                    Return CType(Me(Me.tabledsdocumento.abreviaturaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsdocumento.abreviaturaColumn) = value
            End Set
        End Property
        
        Public Property nota_de_credito As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabledsdocumento.nota_de_creditoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsdocumento.nota_de_creditoColumn) = value
            End Set
        End Property
        
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tabledsdocumento.codigoColumn)
        End Function
        
        Public Sub SetcodigoNull()
            Me(Me.tabledsdocumento.codigoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescripcionNull() As Boolean
            Return Me.IsNull(Me.tabledsdocumento.descripcionColumn)
        End Function
        
        Public Sub SetdescripcionNull()
            Me(Me.tabledsdocumento.descripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsabreviaturaNull() As Boolean
            Return Me.IsNull(Me.tabledsdocumento.abreviaturaColumn)
        End Function
        
        Public Sub SetabreviaturaNull()
            Me(Me.tabledsdocumento.abreviaturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnota_de_creditoNull() As Boolean
            Return Me.IsNull(Me.tabledsdocumento.nota_de_creditoColumn)
        End Function
        
        Public Sub Setnota_de_creditoNull()
            Me(Me.tabledsdocumento.nota_de_creditoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class dsdocumentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As dsdocumentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As dsdocumentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As dsdocumentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ctabancoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbanco As DataColumn
        
        Private columnctacte As DataColumn
        
        Private columnmoneda As DataColumn
        
        Private columnsaldo As DataColumn
        
        Private columnsaldoext As DataColumn
        
        Friend Sub New()
            MyBase.New("ctabanco")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bancoColumn As DataColumn
            Get
                Return Me.columnbanco
            End Get
        End Property
        
        Friend ReadOnly Property ctacteColumn As DataColumn
            Get
                Return Me.columnctacte
            End Get
        End Property
        
        Friend ReadOnly Property monedaColumn As DataColumn
            Get
                Return Me.columnmoneda
            End Get
        End Property
        
        Friend ReadOnly Property saldoColumn As DataColumn
            Get
                Return Me.columnsaldo
            End Get
        End Property
        
        Friend ReadOnly Property saldoextColumn As DataColumn
            Get
                Return Me.columnsaldoext
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ctabancoRow
            Get
                Return CType(Me.Rows(index),ctabancoRow)
            End Get
        End Property
        
        Public Event ctabancoRowChanged As ctabancoRowChangeEventHandler
        
        Public Event ctabancoRowChanging As ctabancoRowChangeEventHandler
        
        Public Event ctabancoRowDeleted As ctabancoRowChangeEventHandler
        
        Public Event ctabancoRowDeleting As ctabancoRowChangeEventHandler
        
        Public Overloads Sub AddctabancoRow(ByVal row As ctabancoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddctabancoRow(ByVal banco As String, ByVal ctacte As String, ByVal moneda As String, ByVal saldo As Decimal, ByVal saldoext As Decimal) As ctabancoRow
            Dim rowctabancoRow As ctabancoRow = CType(Me.NewRow,ctabancoRow)
            rowctabancoRow.ItemArray = New Object() {banco, ctacte, moneda, saldo, saldoext}
            Me.Rows.Add(rowctabancoRow)
            Return rowctabancoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ctabancoDataTable = CType(MyBase.Clone,ctabancoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ctabancoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbanco = Me.Columns("banco")
            Me.columnctacte = Me.Columns("ctacte")
            Me.columnmoneda = Me.Columns("moneda")
            Me.columnsaldo = Me.Columns("saldo")
            Me.columnsaldoext = Me.Columns("saldoext")
        End Sub
        
        Private Sub InitClass()
            Me.columnbanco = New DataColumn("banco", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbanco)
            Me.columnctacte = New DataColumn("ctacte", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnctacte)
            Me.columnmoneda = New DataColumn("moneda", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmoneda)
            Me.columnsaldo = New DataColumn("saldo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaldo)
            Me.columnsaldoext = New DataColumn("saldoext", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaldoext)
        End Sub
        
        Public Function NewctabancoRow() As ctabancoRow
            Return CType(Me.NewRow,ctabancoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ctabancoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ctabancoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ctabancoRowChangedEvent) Is Nothing) Then
                RaiseEvent ctabancoRowChanged(Me, New ctabancoRowChangeEvent(CType(e.Row,ctabancoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ctabancoRowChangingEvent) Is Nothing) Then
                RaiseEvent ctabancoRowChanging(Me, New ctabancoRowChangeEvent(CType(e.Row,ctabancoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ctabancoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ctabancoRowDeleted(Me, New ctabancoRowChangeEvent(CType(e.Row,ctabancoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ctabancoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ctabancoRowDeleting(Me, New ctabancoRowChangeEvent(CType(e.Row,ctabancoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovectabancoRow(ByVal row As ctabancoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ctabancoRow
        Inherits DataRow
        
        Private tablectabanco As ctabancoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablectabanco = CType(Me.Table,ctabancoDataTable)
        End Sub
        
        Public Property banco As String
            Get
                Try 
                    Return CType(Me(Me.tablectabanco.bancoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablectabanco.bancoColumn) = value
            End Set
        End Property
        
        Public Property ctacte As String
            Get
                Try 
                    Return CType(Me(Me.tablectabanco.ctacteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablectabanco.ctacteColumn) = value
            End Set
        End Property
        
        Public Property moneda As String
            Get
                Try 
                    Return CType(Me(Me.tablectabanco.monedaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablectabanco.monedaColumn) = value
            End Set
        End Property
        
        Public Property saldo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablectabanco.saldoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablectabanco.saldoColumn) = value
            End Set
        End Property
        
        Public Property saldoext As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablectabanco.saldoextColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablectabanco.saldoextColumn) = value
            End Set
        End Property
        
        Public Function IsbancoNull() As Boolean
            Return Me.IsNull(Me.tablectabanco.bancoColumn)
        End Function
        
        Public Sub SetbancoNull()
            Me(Me.tablectabanco.bancoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsctacteNull() As Boolean
            Return Me.IsNull(Me.tablectabanco.ctacteColumn)
        End Function
        
        Public Sub SetctacteNull()
            Me(Me.tablectabanco.ctacteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmonedaNull() As Boolean
            Return Me.IsNull(Me.tablectabanco.monedaColumn)
        End Function
        
        Public Sub SetmonedaNull()
            Me(Me.tablectabanco.monedaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssaldoNull() As Boolean
            Return Me.IsNull(Me.tablectabanco.saldoColumn)
        End Function
        
        Public Sub SetsaldoNull()
            Me(Me.tablectabanco.saldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssaldoextNull() As Boolean
            Return Me.IsNull(Me.tablectabanco.saldoextColumn)
        End Function
        
        Public Sub SetsaldoextNull()
            Me(Me.tablectabanco.saldoextColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ctabancoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ctabancoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ctabancoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ctabancoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cambioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfecha As DataColumn
        
        Private columncompra As DataColumn
        
        Private columnventa As DataColumn
        
        Private columnmon1 As DataColumn
        
        Private columnmon2 As DataColumn
        
        Friend Sub New()
            MyBase.New("cambio")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fechaColumn As DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        Friend ReadOnly Property compraColumn As DataColumn
            Get
                Return Me.columncompra
            End Get
        End Property
        
        Friend ReadOnly Property ventaColumn As DataColumn
            Get
                Return Me.columnventa
            End Get
        End Property
        
        Friend ReadOnly Property mon1Column As DataColumn
            Get
                Return Me.columnmon1
            End Get
        End Property
        
        Friend ReadOnly Property mon2Column As DataColumn
            Get
                Return Me.columnmon2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cambioRow
            Get
                Return CType(Me.Rows(index),cambioRow)
            End Get
        End Property
        
        Public Event cambioRowChanged As cambioRowChangeEventHandler
        
        Public Event cambioRowChanging As cambioRowChangeEventHandler
        
        Public Event cambioRowDeleted As cambioRowChangeEventHandler
        
        Public Event cambioRowDeleting As cambioRowChangeEventHandler
        
        Public Overloads Sub AddcambioRow(ByVal row As cambioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcambioRow(ByVal fecha As Date, ByVal compra As Double, ByVal venta As Double, ByVal mon1 As String, ByVal mon2 As String) As cambioRow
            Dim rowcambioRow As cambioRow = CType(Me.NewRow,cambioRow)
            rowcambioRow.ItemArray = New Object() {fecha, compra, venta, mon1, mon2}
            Me.Rows.Add(rowcambioRow)
            Return rowcambioRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cambioDataTable = CType(MyBase.Clone,cambioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cambioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfecha = Me.Columns("fecha")
            Me.columncompra = Me.Columns("compra")
            Me.columnventa = Me.Columns("venta")
            Me.columnmon1 = Me.Columns("mon1")
            Me.columnmon2 = Me.Columns("mon2")
        End Sub
        
        Private Sub InitClass()
            Me.columnfecha = New DataColumn("fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfecha)
            Me.columncompra = New DataColumn("compra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncompra)
            Me.columnventa = New DataColumn("venta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnventa)
            Me.columnmon1 = New DataColumn("mon1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmon1)
            Me.columnmon2 = New DataColumn("mon2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmon2)
        End Sub
        
        Public Function NewcambioRow() As cambioRow
            Return CType(Me.NewRow,cambioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cambioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cambioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cambioRowChangedEvent) Is Nothing) Then
                RaiseEvent cambioRowChanged(Me, New cambioRowChangeEvent(CType(e.Row,cambioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cambioRowChangingEvent) Is Nothing) Then
                RaiseEvent cambioRowChanging(Me, New cambioRowChangeEvent(CType(e.Row,cambioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cambioRowDeletedEvent) Is Nothing) Then
                RaiseEvent cambioRowDeleted(Me, New cambioRowChangeEvent(CType(e.Row,cambioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cambioRowDeletingEvent) Is Nothing) Then
                RaiseEvent cambioRowDeleting(Me, New cambioRowChangeEvent(CType(e.Row,cambioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecambioRow(ByVal row As cambioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cambioRow
        Inherits DataRow
        
        Private tablecambio As cambioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecambio = CType(Me.Table,cambioDataTable)
        End Sub
        
        Public Property fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tablecambio.fechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecambio.fechaColumn) = value
            End Set
        End Property
        
        Public Property compra As Double
            Get
                Try 
                    Return CType(Me(Me.tablecambio.compraColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecambio.compraColumn) = value
            End Set
        End Property
        
        Public Property venta As Double
            Get
                Try 
                    Return CType(Me(Me.tablecambio.ventaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecambio.ventaColumn) = value
            End Set
        End Property
        
        Public Property mon1 As String
            Get
                Try 
                    Return CType(Me(Me.tablecambio.mon1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecambio.mon1Column) = value
            End Set
        End Property
        
        Public Property mon2 As String
            Get
                Try 
                    Return CType(Me(Me.tablecambio.mon2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecambio.mon2Column) = value
            End Set
        End Property
        
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tablecambio.fechaColumn)
        End Function
        
        Public Sub SetfechaNull()
            Me(Me.tablecambio.fechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscompraNull() As Boolean
            Return Me.IsNull(Me.tablecambio.compraColumn)
        End Function
        
        Public Sub SetcompraNull()
            Me(Me.tablecambio.compraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsventaNull() As Boolean
            Return Me.IsNull(Me.tablecambio.ventaColumn)
        End Function
        
        Public Sub SetventaNull()
            Me(Me.tablecambio.ventaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismon1Null() As Boolean
            Return Me.IsNull(Me.tablecambio.mon1Column)
        End Function
        
        Public Sub Setmon1Null()
            Me(Me.tablecambio.mon1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismon2Null() As Boolean
            Return Me.IsNull(Me.tablecambio.mon2Column)
        End Function
        
        Public Sub Setmon2Null()
            Me(Me.tablecambio.mon2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cambioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cambioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cambioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cambioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class compcajaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnrocomp As DataColumn
        
        Private columndesptovta As DataColumn
        
        Private columnmovcaja As DataColumn
        
        Private columnfecha As DataColumn
        
        Private columnmon As DataColumn
        
        Private columnmonto As DataColumn
        
        Friend Sub New()
            MyBase.New("compcaja")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property nrocompColumn As DataColumn
            Get
                Return Me.columnnrocomp
            End Get
        End Property
        
        Friend ReadOnly Property desptovtaColumn As DataColumn
            Get
                Return Me.columndesptovta
            End Get
        End Property
        
        Friend ReadOnly Property movcajaColumn As DataColumn
            Get
                Return Me.columnmovcaja
            End Get
        End Property
        
        Friend ReadOnly Property fechaColumn As DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        Friend ReadOnly Property monColumn As DataColumn
            Get
                Return Me.columnmon
            End Get
        End Property
        
        Friend ReadOnly Property montoColumn As DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As compcajaRow
            Get
                Return CType(Me.Rows(index),compcajaRow)
            End Get
        End Property
        
        Public Event compcajaRowChanged As compcajaRowChangeEventHandler
        
        Public Event compcajaRowChanging As compcajaRowChangeEventHandler
        
        Public Event compcajaRowDeleted As compcajaRowChangeEventHandler
        
        Public Event compcajaRowDeleting As compcajaRowChangeEventHandler
        
        Public Overloads Sub AddcompcajaRow(ByVal row As compcajaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcompcajaRow(ByVal nrocomp As String, ByVal desptovta As String, ByVal movcaja As String, ByVal fecha As Date, ByVal mon As String, ByVal monto As Decimal) As compcajaRow
            Dim rowcompcajaRow As compcajaRow = CType(Me.NewRow,compcajaRow)
            rowcompcajaRow.ItemArray = New Object() {nrocomp, desptovta, movcaja, fecha, mon, monto}
            Me.Rows.Add(rowcompcajaRow)
            Return rowcompcajaRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As compcajaDataTable = CType(MyBase.Clone,compcajaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New compcajaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnnrocomp = Me.Columns("nrocomp")
            Me.columndesptovta = Me.Columns("desptovta")
            Me.columnmovcaja = Me.Columns("movcaja")
            Me.columnfecha = Me.Columns("fecha")
            Me.columnmon = Me.Columns("mon")
            Me.columnmonto = Me.Columns("monto")
        End Sub
        
        Private Sub InitClass()
            Me.columnnrocomp = New DataColumn("nrocomp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnrocomp)
            Me.columndesptovta = New DataColumn("desptovta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesptovta)
            Me.columnmovcaja = New DataColumn("movcaja", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmovcaja)
            Me.columnfecha = New DataColumn("fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfecha)
            Me.columnmon = New DataColumn("mon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmon)
            Me.columnmonto = New DataColumn("monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmonto)
        End Sub
        
        Public Function NewcompcajaRow() As compcajaRow
            Return CType(Me.NewRow,compcajaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New compcajaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(compcajaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.compcajaRowChangedEvent) Is Nothing) Then
                RaiseEvent compcajaRowChanged(Me, New compcajaRowChangeEvent(CType(e.Row,compcajaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.compcajaRowChangingEvent) Is Nothing) Then
                RaiseEvent compcajaRowChanging(Me, New compcajaRowChangeEvent(CType(e.Row,compcajaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.compcajaRowDeletedEvent) Is Nothing) Then
                RaiseEvent compcajaRowDeleted(Me, New compcajaRowChangeEvent(CType(e.Row,compcajaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.compcajaRowDeletingEvent) Is Nothing) Then
                RaiseEvent compcajaRowDeleting(Me, New compcajaRowChangeEvent(CType(e.Row,compcajaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecompcajaRow(ByVal row As compcajaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class compcajaRow
        Inherits DataRow
        
        Private tablecompcaja As compcajaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompcaja = CType(Me.Table,compcajaDataTable)
        End Sub
        
        Public Property nrocomp As String
            Get
                Try 
                    Return CType(Me(Me.tablecompcaja.nrocompColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompcaja.nrocompColumn) = value
            End Set
        End Property
        
        Public Property desptovta As String
            Get
                Try 
                    Return CType(Me(Me.tablecompcaja.desptovtaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompcaja.desptovtaColumn) = value
            End Set
        End Property
        
        Public Property movcaja As String
            Get
                Try 
                    Return CType(Me(Me.tablecompcaja.movcajaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompcaja.movcajaColumn) = value
            End Set
        End Property
        
        Public Property fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tablecompcaja.fechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompcaja.fechaColumn) = value
            End Set
        End Property
        
        Public Property mon As String
            Get
                Try 
                    Return CType(Me(Me.tablecompcaja.monColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompcaja.monColumn) = value
            End Set
        End Property
        
        Public Property monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecompcaja.montoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompcaja.montoColumn) = value
            End Set
        End Property
        
        Public Function IsnrocompNull() As Boolean
            Return Me.IsNull(Me.tablecompcaja.nrocompColumn)
        End Function
        
        Public Sub SetnrocompNull()
            Me(Me.tablecompcaja.nrocompColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesptovtaNull() As Boolean
            Return Me.IsNull(Me.tablecompcaja.desptovtaColumn)
        End Function
        
        Public Sub SetdesptovtaNull()
            Me(Me.tablecompcaja.desptovtaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmovcajaNull() As Boolean
            Return Me.IsNull(Me.tablecompcaja.movcajaColumn)
        End Function
        
        Public Sub SetmovcajaNull()
            Me(Me.tablecompcaja.movcajaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tablecompcaja.fechaColumn)
        End Function
        
        Public Sub SetfechaNull()
            Me(Me.tablecompcaja.fechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmonNull() As Boolean
            Return Me.IsNull(Me.tablecompcaja.monColumn)
        End Function
        
        Public Sub SetmonNull()
            Me(Me.tablecompcaja.monColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tablecompcaja.montoColumn)
        End Function
        
        Public Sub SetmontoNull()
            Me(Me.tablecompcaja.montoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class compcajaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As compcajaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As compcajaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As compcajaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pagoprovDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntipodoc As DataColumn
        
        Private columndestipodoc As DataColumn
        
        Private columnidprov As DataColumn
        
        Private columnproveedor As DataColumn
        
        Private columnfechadoc As DataColumn
        
        Private columnfechavenc As DataColumn
        
        Private columnmonto As DataColumn
        
        Private columnimporte As DataColumn
        
        Private columnsaldo As DataColumn
        
        Private columndesalmacen As DataColumn
        
        Private columnnrodoc As DataColumn
        
        Friend Sub New()
            MyBase.New("pagoprov")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tipodocColumn As DataColumn
            Get
                Return Me.columntipodoc
            End Get
        End Property
        
        Friend ReadOnly Property destipodocColumn As DataColumn
            Get
                Return Me.columndestipodoc
            End Get
        End Property
        
        Friend ReadOnly Property idprovColumn As DataColumn
            Get
                Return Me.columnidprov
            End Get
        End Property
        
        Friend ReadOnly Property proveedorColumn As DataColumn
            Get
                Return Me.columnproveedor
            End Get
        End Property
        
        Friend ReadOnly Property fechadocColumn As DataColumn
            Get
                Return Me.columnfechadoc
            End Get
        End Property
        
        Friend ReadOnly Property fechavencColumn As DataColumn
            Get
                Return Me.columnfechavenc
            End Get
        End Property
        
        Friend ReadOnly Property montoColumn As DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        Friend ReadOnly Property importeColumn As DataColumn
            Get
                Return Me.columnimporte
            End Get
        End Property
        
        Friend ReadOnly Property saldoColumn As DataColumn
            Get
                Return Me.columnsaldo
            End Get
        End Property
        
        Friend ReadOnly Property desalmacenColumn As DataColumn
            Get
                Return Me.columndesalmacen
            End Get
        End Property
        
        Friend ReadOnly Property nrodocColumn As DataColumn
            Get
                Return Me.columnnrodoc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As pagoprovRow
            Get
                Return CType(Me.Rows(index),pagoprovRow)
            End Get
        End Property
        
        Public Event pagoprovRowChanged As pagoprovRowChangeEventHandler
        
        Public Event pagoprovRowChanging As pagoprovRowChangeEventHandler
        
        Public Event pagoprovRowDeleted As pagoprovRowChangeEventHandler
        
        Public Event pagoprovRowDeleting As pagoprovRowChangeEventHandler
        
        Public Overloads Sub AddpagoprovRow(ByVal row As pagoprovRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddpagoprovRow(ByVal tipodoc As String, ByVal destipodoc As String, ByVal idprov As String, ByVal proveedor As String, ByVal fechadoc As Date, ByVal fechavenc As Date, ByVal monto As Decimal, ByVal importe As Decimal, ByVal saldo As Decimal, ByVal desalmacen As String, ByVal nrodoc As String) As pagoprovRow
            Dim rowpagoprovRow As pagoprovRow = CType(Me.NewRow,pagoprovRow)
            rowpagoprovRow.ItemArray = New Object() {tipodoc, destipodoc, idprov, proveedor, fechadoc, fechavenc, monto, importe, saldo, desalmacen, nrodoc}
            Me.Rows.Add(rowpagoprovRow)
            Return rowpagoprovRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As pagoprovDataTable = CType(MyBase.Clone,pagoprovDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New pagoprovDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntipodoc = Me.Columns("tipodoc")
            Me.columndestipodoc = Me.Columns("destipodoc")
            Me.columnidprov = Me.Columns("idprov")
            Me.columnproveedor = Me.Columns("proveedor")
            Me.columnfechadoc = Me.Columns("fechadoc")
            Me.columnfechavenc = Me.Columns("fechavenc")
            Me.columnmonto = Me.Columns("monto")
            Me.columnimporte = Me.Columns("importe")
            Me.columnsaldo = Me.Columns("saldo")
            Me.columndesalmacen = Me.Columns("desalmacen")
            Me.columnnrodoc = Me.Columns("nrodoc")
        End Sub
        
        Private Sub InitClass()
            Me.columntipodoc = New DataColumn("tipodoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntipodoc)
            Me.columndestipodoc = New DataColumn("destipodoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndestipodoc)
            Me.columnidprov = New DataColumn("idprov", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidprov)
            Me.columnproveedor = New DataColumn("proveedor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnproveedor)
            Me.columnfechadoc = New DataColumn("fechadoc", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfechadoc)
            Me.columnfechavenc = New DataColumn("fechavenc", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfechavenc)
            Me.columnmonto = New DataColumn("monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmonto)
            Me.columnimporte = New DataColumn("importe", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimporte)
            Me.columnsaldo = New DataColumn("saldo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaldo)
            Me.columndesalmacen = New DataColumn("desalmacen", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndesalmacen)
            Me.columnnrodoc = New DataColumn("nrodoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnrodoc)
        End Sub
        
        Public Function NewpagoprovRow() As pagoprovRow
            Return CType(Me.NewRow,pagoprovRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New pagoprovRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pagoprovRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pagoprovRowChangedEvent) Is Nothing) Then
                RaiseEvent pagoprovRowChanged(Me, New pagoprovRowChangeEvent(CType(e.Row,pagoprovRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pagoprovRowChangingEvent) Is Nothing) Then
                RaiseEvent pagoprovRowChanging(Me, New pagoprovRowChangeEvent(CType(e.Row,pagoprovRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pagoprovRowDeletedEvent) Is Nothing) Then
                RaiseEvent pagoprovRowDeleted(Me, New pagoprovRowChangeEvent(CType(e.Row,pagoprovRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pagoprovRowDeletingEvent) Is Nothing) Then
                RaiseEvent pagoprovRowDeleting(Me, New pagoprovRowChangeEvent(CType(e.Row,pagoprovRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovepagoprovRow(ByVal row As pagoprovRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pagoprovRow
        Inherits DataRow
        
        Private tablepagoprov As pagoprovDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepagoprov = CType(Me.Table,pagoprovDataTable)
        End Sub
        
        Public Property tipodoc As String
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.tipodocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.tipodocColumn) = value
            End Set
        End Property
        
        Public Property destipodoc As String
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.destipodocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.destipodocColumn) = value
            End Set
        End Property
        
        Public Property idprov As String
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.idprovColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.idprovColumn) = value
            End Set
        End Property
        
        Public Property proveedor As String
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.proveedorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.proveedorColumn) = value
            End Set
        End Property
        
        Public Property fechadoc As Date
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.fechadocColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.fechadocColumn) = value
            End Set
        End Property
        
        Public Property fechavenc As Date
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.fechavencColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.fechavencColumn) = value
            End Set
        End Property
        
        Public Property monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.montoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.montoColumn) = value
            End Set
        End Property
        
        Public Property importe As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.importeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.importeColumn) = value
            End Set
        End Property
        
        Public Property saldo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.saldoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.saldoColumn) = value
            End Set
        End Property
        
        Public Property desalmacen As String
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.desalmacenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.desalmacenColumn) = value
            End Set
        End Property
        
        Public Property nrodoc As String
            Get
                Try 
                    Return CType(Me(Me.tablepagoprov.nrodocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepagoprov.nrodocColumn) = value
            End Set
        End Property
        
        Public Function IstipodocNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.tipodocColumn)
        End Function
        
        Public Sub SettipodocNull()
            Me(Me.tablepagoprov.tipodocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdestipodocNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.destipodocColumn)
        End Function
        
        Public Sub SetdestipodocNull()
            Me(Me.tablepagoprov.destipodocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsidprovNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.idprovColumn)
        End Function
        
        Public Sub SetidprovNull()
            Me(Me.tablepagoprov.idprovColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsproveedorNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.proveedorColumn)
        End Function
        
        Public Sub SetproveedorNull()
            Me(Me.tablepagoprov.proveedorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfechadocNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.fechadocColumn)
        End Function
        
        Public Sub SetfechadocNull()
            Me(Me.tablepagoprov.fechadocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfechavencNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.fechavencColumn)
        End Function
        
        Public Sub SetfechavencNull()
            Me(Me.tablepagoprov.fechavencColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.montoColumn)
        End Function
        
        Public Sub SetmontoNull()
            Me(Me.tablepagoprov.montoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsimporteNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.importeColumn)
        End Function
        
        Public Sub SetimporteNull()
            Me(Me.tablepagoprov.importeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssaldoNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.saldoColumn)
        End Function
        
        Public Sub SetsaldoNull()
            Me(Me.tablepagoprov.saldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdesalmacenNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.desalmacenColumn)
        End Function
        
        Public Sub SetdesalmacenNull()
            Me(Me.tablepagoprov.desalmacenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnrodocNull() As Boolean
            Return Me.IsNull(Me.tablepagoprov.nrodocColumn)
        End Function
        
        Public Sub SetnrodocNull()
            Me(Me.tablepagoprov.nrodocColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class pagoprovRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As pagoprovRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As pagoprovRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As pagoprovRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class excelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBANCO As DataColumn
        
        Private columnNROCUENTA As DataColumn
        
        Private columnFOPERACION As DataColumn
        
        Private column_SUCURSAL_AGENCIA As DataColumn
        
        Private column_NROOPERACION___MOVIMIENTO As DataColumn
        
        Private columnCONCEPTO As DataColumn
        
        Private columnMON As DataColumn
        
        Private columnMONto As DataColumn
        
        Private columnSALDO As DataColumn
        
        Friend Sub New()
            MyBase.New("excel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BANCOColumn As DataColumn
            Get
                Return Me.columnBANCO
            End Get
        End Property
        
        Friend ReadOnly Property NROCUENTAColumn As DataColumn
            Get
                Return Me.columnNROCUENTA
            End Get
        End Property
        
        Friend ReadOnly Property FOPERACIONColumn As DataColumn
            Get
                Return Me.columnFOPERACION
            End Get
        End Property
        
        Friend ReadOnly Property _SUCURSAL_AGENCIAColumn As DataColumn
            Get
                Return Me.column_SUCURSAL_AGENCIA
            End Get
        End Property
        
        Friend ReadOnly Property _NROOPERACION___MOVIMIENTOColumn As DataColumn
            Get
                Return Me.column_NROOPERACION___MOVIMIENTO
            End Get
        End Property
        
        Friend ReadOnly Property CONCEPTOColumn As DataColumn
            Get
                Return Me.columnCONCEPTO
            End Get
        End Property
        
        Friend ReadOnly Property MONColumn As DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        Friend ReadOnly Property MONtoColumn As DataColumn
            Get
                Return Me.columnMONto
            End Get
        End Property
        
        Friend ReadOnly Property SALDOColumn As DataColumn
            Get
                Return Me.columnSALDO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As excelRow
            Get
                Return CType(Me.Rows(index),excelRow)
            End Get
        End Property
        
        Public Event excelRowChanged As excelRowChangeEventHandler
        
        Public Event excelRowChanging As excelRowChangeEventHandler
        
        Public Event excelRowDeleted As excelRowChangeEventHandler
        
        Public Event excelRowDeleting As excelRowChangeEventHandler
        
        Public Overloads Sub AddexcelRow(ByVal row As excelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddexcelRow(ByVal BANCO As String, ByVal NROCUENTA As String, ByVal FOPERACION As Date, ByVal _SUCURSAL_AGENCIA As String, ByVal _NROOPERACION___MOVIMIENTO As String, ByVal CONCEPTO As String, ByVal MON As String, ByVal MONto As Decimal, ByVal SALDO As Decimal) As excelRow
            Dim rowexcelRow As excelRow = CType(Me.NewRow,excelRow)
            rowexcelRow.ItemArray = New Object() {BANCO, NROCUENTA, FOPERACION, _SUCURSAL_AGENCIA, _NROOPERACION___MOVIMIENTO, CONCEPTO, MON, MONto, SALDO}
            Me.Rows.Add(rowexcelRow)
            Return rowexcelRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As excelDataTable = CType(MyBase.Clone,excelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New excelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBANCO = Me.Columns("BANCO")
            Me.columnNROCUENTA = Me.Columns("NROCUENTA")
            Me.columnFOPERACION = Me.Columns("FOPERACION")
            Me.column_SUCURSAL_AGENCIA = Me.Columns("SUCURSAL-AGENCIA")
            Me.column_NROOPERACION___MOVIMIENTO = Me.Columns("NROOPERACION - MOVIMIENTO")
            Me.columnCONCEPTO = Me.Columns("CONCEPTO")
            Me.columnMON = Me.Columns("MON")
            Me.columnMONto = Me.Columns("MONto")
            Me.columnSALDO = Me.Columns("SALDO")
        End Sub
        
        Private Sub InitClass()
            Me.columnBANCO = New DataColumn("BANCO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANCO)
            Me.columnNROCUENTA = New DataColumn("NROCUENTA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNROCUENTA)
            Me.columnFOPERACION = New DataColumn("FOPERACION", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFOPERACION)
            Me.column_SUCURSAL_AGENCIA = New DataColumn("SUCURSAL-AGENCIA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_SUCURSAL_AGENCIA)
            Me.column_NROOPERACION___MOVIMIENTO = New DataColumn("NROOPERACION - MOVIMIENTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_NROOPERACION___MOVIMIENTO)
            Me.columnCONCEPTO = New DataColumn("CONCEPTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONCEPTO)
            Me.columnMON = New DataColumn("MON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMON)
            Me.columnMONto = New DataColumn("MONto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMONto)
            Me.columnSALDO = New DataColumn("SALDO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSALDO)
        End Sub
        
        Public Function NewexcelRow() As excelRow
            Return CType(Me.NewRow,excelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New excelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(excelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.excelRowChangedEvent) Is Nothing) Then
                RaiseEvent excelRowChanged(Me, New excelRowChangeEvent(CType(e.Row,excelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.excelRowChangingEvent) Is Nothing) Then
                RaiseEvent excelRowChanging(Me, New excelRowChangeEvent(CType(e.Row,excelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.excelRowDeletedEvent) Is Nothing) Then
                RaiseEvent excelRowDeleted(Me, New excelRowChangeEvent(CType(e.Row,excelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.excelRowDeletingEvent) Is Nothing) Then
                RaiseEvent excelRowDeleting(Me, New excelRowChangeEvent(CType(e.Row,excelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveexcelRow(ByVal row As excelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class excelRow
        Inherits DataRow
        
        Private tableexcel As excelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableexcel = CType(Me.Table,excelDataTable)
        End Sub
        
        Public Property BANCO As String
            Get
                Try 
                    Return CType(Me(Me.tableexcel.BANCOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexcel.BANCOColumn) = value
            End Set
        End Property
        
        Public Property NROCUENTA As String
            Get
                Try 
                    Return CType(Me(Me.tableexcel.NROCUENTAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexcel.NROCUENTAColumn) = value
            End Set
        End Property
        
        Public Property FOPERACION As Date
            Get
                Try 
                    Return CType(Me(Me.tableexcel.FOPERACIONColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexcel.FOPERACIONColumn) = value
            End Set
        End Property
        
        Public Property SUCURSAL_AGENCIA() As String
            Get
                Try
                    Return CType(Me(Me.tableexcel._SUCURSAL_AGENCIAColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableexcel._SUCURSAL_AGENCIAColumn) = Value
            End Set
        End Property


        Public Property NROOPERACION___MOVIMIENTO() As String
            Get
                Try
                    Return CType(Me(Me.tableexcel._NROOPERACION___MOVIMIENTOColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableexcel._NROOPERACION___MOVIMIENTOColumn) = Value
            End Set
        End Property
        
        Public Property CONCEPTO As String
            Get
                Try 
                    Return CType(Me(Me.tableexcel.CONCEPTOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexcel.CONCEPTOColumn) = value
            End Set
        End Property
        
        Public Property MON As String
            Get
                Try 
                    Return CType(Me(Me.tableexcel.MONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexcel.MONColumn) = value
            End Set
        End Property
        
        Public Property MONto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableexcel.MONtoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexcel.MONtoColumn) = value
            End Set
        End Property
        
        Public Property SALDO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableexcel.SALDOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableexcel.SALDOColumn) = value
            End Set
        End Property
        
        Public Function IsBANCONull() As Boolean
            Return Me.IsNull(Me.tableexcel.BANCOColumn)
        End Function
        
        Public Sub SetBANCONull()
            Me(Me.tableexcel.BANCOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNROCUENTANull() As Boolean
            Return Me.IsNull(Me.tableexcel.NROCUENTAColumn)
        End Function
        
        Public Sub SetNROCUENTANull()
            Me(Me.tableexcel.NROCUENTAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFOPERACIONNull() As Boolean
            Return Me.IsNull(Me.tableexcel.FOPERACIONColumn)
        End Function
        
        Public Sub SetFOPERACIONNull()
            Me(Me.tableexcel.FOPERACIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_SUCURSAL_AGENCIANull() As Boolean
            Return Me.IsNull(Me.tableexcel._SUCURSAL_AGENCIAColumn)
        End Function
        
        Public Sub Set_SUCURSAL_AGENCIANull()
            Me(Me.tableexcel._SUCURSAL_AGENCIAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_NROOPERACION___MOVIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableexcel._NROOPERACION___MOVIMIENTOColumn)
        End Function
        
        Public Sub Set_NROOPERACION___MOVIMIENTONull()
            Me(Me.tableexcel._NROOPERACION___MOVIMIENTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONCEPTONull() As Boolean
            Return Me.IsNull(Me.tableexcel.CONCEPTOColumn)
        End Function
        
        Public Sub SetCONCEPTONull()
            Me(Me.tableexcel.CONCEPTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableexcel.MONColumn)
        End Function
        
        Public Sub SetMONNull()
            Me(Me.tableexcel.MONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMONtoNull() As Boolean
            Return Me.IsNull(Me.tableexcel.MONtoColumn)
        End Function
        
        Public Sub SetMONtoNull()
            Me(Me.tableexcel.MONtoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSALDONull() As Boolean
            Return Me.IsNull(Me.tableexcel.SALDOColumn)
        End Function
        
        Public Sub SetSALDONull()
            Me(Me.tableexcel.SALDOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class excelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As excelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As excelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As excelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
