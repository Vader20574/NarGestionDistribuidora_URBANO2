'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds_gridclie2
    Inherits DataSet
    
    Private tablecliente As clienteDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cliente")) Is Nothing) Then
                Me.Tables.Add(New clienteDataTable(ds.Tables("cliente")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cliente As clienteDataTable
        Get
            Return Me.tablecliente
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds_gridclie2 = CType(MyBase.Clone,ds_gridclie2)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cliente")) Is Nothing) Then
            Me.Tables.Add(New clienteDataTable(ds.Tables("cliente")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecliente = CType(Me.Tables("cliente"),clienteDataTable)
        If (Not (Me.tablecliente) Is Nothing) Then
            Me.tablecliente.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds_gridclie2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds_gridclie2.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecliente = New clienteDataTable
        Me.Tables.Add(Me.tablecliente)
    End Sub
    
    Private Function ShouldSerializecliente() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub clienteRowChangeEventHandler(ByVal sender As Object, ByVal e As clienteRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clienteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo As DataColumn
        
        Private columnapellidop As DataColumn
        
        Private columnrazon As DataColumn
        
        Private columnruc As DataColumn
        
        Private columnapellidom As DataColumn
        
        Private columnnombre As DataColumn
        
        Private columncosto As DataColumn
        
        Friend Sub New()
            MyBase.New("cliente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigoColumn As DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        Friend ReadOnly Property apellidopColumn As DataColumn
            Get
                Return Me.columnapellidop
            End Get
        End Property
        
        Friend ReadOnly Property razonColumn As DataColumn
            Get
                Return Me.columnrazon
            End Get
        End Property
        
        Friend ReadOnly Property rucColumn As DataColumn
            Get
                Return Me.columnruc
            End Get
        End Property
        
        Friend ReadOnly Property apellidomColumn As DataColumn
            Get
                Return Me.columnapellidom
            End Get
        End Property
        
        Friend ReadOnly Property nombreColumn As DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        Friend ReadOnly Property costoColumn As DataColumn
            Get
                Return Me.columncosto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As clienteRow
            Get
                Return CType(Me.Rows(index),clienteRow)
            End Get
        End Property
        
        Public Event clienteRowChanged As clienteRowChangeEventHandler
        
        Public Event clienteRowChanging As clienteRowChangeEventHandler
        
        Public Event clienteRowDeleted As clienteRowChangeEventHandler
        
        Public Event clienteRowDeleting As clienteRowChangeEventHandler
        
        Public Overloads Sub AddclienteRow(ByVal row As clienteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddclienteRow(ByVal codigo As String, ByVal apellidop As String, ByVal razon As String, ByVal ruc As Integer, ByVal apellidom As String, ByVal nombre As String, ByVal costo As Decimal) As clienteRow
            Dim rowclienteRow As clienteRow = CType(Me.NewRow,clienteRow)
            rowclienteRow.ItemArray = New Object() {codigo, apellidop, razon, ruc, apellidom, nombre, costo}
            Me.Rows.Add(rowclienteRow)
            Return rowclienteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As clienteDataTable = CType(MyBase.Clone,clienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New clienteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo = Me.Columns("codigo")
            Me.columnapellidop = Me.Columns("apellidop")
            Me.columnrazon = Me.Columns("razon")
            Me.columnruc = Me.Columns("ruc")
            Me.columnapellidom = Me.Columns("apellidom")
            Me.columnnombre = Me.Columns("nombre")
            Me.columncosto = Me.Columns("costo")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo = New DataColumn("codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo)
            Me.columnapellidop = New DataColumn("apellidop", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnapellidop)
            Me.columnrazon = New DataColumn("razon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrazon)
            Me.columnruc = New DataColumn("ruc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnruc)
            Me.columnapellidom = New DataColumn("apellidom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnapellidom)
            Me.columnnombre = New DataColumn("nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnombre)
            Me.columncosto = New DataColumn("costo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncosto)
        End Sub
        
        Public Function NewclienteRow() As clienteRow
            Return CType(Me.NewRow,clienteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New clienteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(clienteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.clienteRowChangedEvent) Is Nothing) Then
                RaiseEvent clienteRowChanged(Me, New clienteRowChangeEvent(CType(e.Row,clienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.clienteRowChangingEvent) Is Nothing) Then
                RaiseEvent clienteRowChanging(Me, New clienteRowChangeEvent(CType(e.Row,clienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.clienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent clienteRowDeleted(Me, New clienteRowChangeEvent(CType(e.Row,clienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.clienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent clienteRowDeleting(Me, New clienteRowChangeEvent(CType(e.Row,clienteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveclienteRow(ByVal row As clienteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clienteRow
        Inherits DataRow
        
        Private tablecliente As clienteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecliente = CType(Me.Table,clienteDataTable)
        End Sub
        
        Public Property codigo As String
            Get
                Try 
                    Return CType(Me(Me.tablecliente.codigoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecliente.codigoColumn) = value
            End Set
        End Property
        
        Public Property apellidop As String
            Get
                Try 
                    Return CType(Me(Me.tablecliente.apellidopColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecliente.apellidopColumn) = value
            End Set
        End Property
        
        Public Property razon As String
            Get
                Try 
                    Return CType(Me(Me.tablecliente.razonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecliente.razonColumn) = value
            End Set
        End Property
        
        Public Property ruc As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecliente.rucColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecliente.rucColumn) = value
            End Set
        End Property
        
        Public Property apellidom As String
            Get
                Try 
                    Return CType(Me(Me.tablecliente.apellidomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecliente.apellidomColumn) = value
            End Set
        End Property
        
        Public Property nombre As String
            Get
                Try 
                    Return CType(Me(Me.tablecliente.nombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecliente.nombreColumn) = value
            End Set
        End Property
        
        Public Property costo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecliente.costoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecliente.costoColumn) = value
            End Set
        End Property
        
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tablecliente.codigoColumn)
        End Function
        
        Public Sub SetcodigoNull()
            Me(Me.tablecliente.codigoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsapellidopNull() As Boolean
            Return Me.IsNull(Me.tablecliente.apellidopColumn)
        End Function
        
        Public Sub SetapellidopNull()
            Me(Me.tablecliente.apellidopColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrazonNull() As Boolean
            Return Me.IsNull(Me.tablecliente.razonColumn)
        End Function
        
        Public Sub SetrazonNull()
            Me(Me.tablecliente.razonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrucNull() As Boolean
            Return Me.IsNull(Me.tablecliente.rucColumn)
        End Function
        
        Public Sub SetrucNull()
            Me(Me.tablecliente.rucColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsapellidomNull() As Boolean
            Return Me.IsNull(Me.tablecliente.apellidomColumn)
        End Function
        
        Public Sub SetapellidomNull()
            Me(Me.tablecliente.apellidomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tablecliente.nombreColumn)
        End Function
        
        Public Sub SetnombreNull()
            Me(Me.tablecliente.nombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscostoNull() As Boolean
            Return Me.IsNull(Me.tablecliente.costoColumn)
        End Function
        
        Public Sub SetcostoNull()
            Me(Me.tablecliente.costoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class clienteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As clienteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As clienteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As clienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
